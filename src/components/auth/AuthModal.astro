---
---
<div id="auth-modal" class="auth-modal" hidden>
  <div class="modal-content">
    <button class="close-button" aria-label="Close modal">&times;</button>
    
    <div class="auth-tabs">
      <button class="tab-button active" data-tab="signin">Sign In</button>
      <button class="tab-button" data-tab="signup">Sign Up</button>
    </div>

    <form id="signin-form" class="auth-form">
      <div class="form-group">
        <label for="signin-email">Email</label>
        <input type="email" id="signin-email" required />
      </div>
      <div class="form-group">
        <label for="signin-password">Password</label>
        <input type="password" id="signin-password" required />
      </div>
      <button type="submit" class="btn btn-primary">Sign In</button>
    </form>

    <form id="signup-form" class="auth-form" hidden>
      <div class="form-group">
        <label for="signup-email">Email</label>
        <input type="email" id="signup-email" required />
      </div>
      <div class="form-group">
        <label for="signup-password">Password</label>
        <input type="password" id="signup-password" required />
      </div>
      <button type="submit" class="btn btn-primary">Sign Up</button>
    </form>

    <p class="auth-message" aria-live="polite"></p>
  </div>
</div>

<style>
  .auth-modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 1000;
  }

  .modal-content {
    background: var(--bg-primary);
    padding: var(--space-6);
    border-radius: var(--radius-lg);
    width: 100%;
    max-width: 400px;
    position: relative;
  }

  .close-button {
    position: absolute;
    top: var(--space-4);
    right: var(--space-4);
    background: none;
    border: none;
    font-size: var(--font-size-xl);
    cursor: pointer;
    color: var(--text-secondary);
  }

  .auth-tabs {
    display: flex;
    gap: var(--space-2);
    margin-bottom: var(--space-6);
  }

  .tab-button {
    flex: 1;
    padding: var(--space-2);
    background: none;
    border: none;
    border-bottom: 2px solid var(--secondary-2);
    cursor: pointer;
    color: var(--text-secondary);
  }

  .tab-button.active {
    color: var(--accent-2);
    border-bottom-color: var(--accent-2);
  }

  .form-group {
    margin-bottom: var(--space-4);
  }

  .form-group label {
    display: block;
    margin-bottom: var(--space-2);
    color: var(--text-secondary);
  }

  .auth-message {
    margin-top: var(--space-4);
    text-align: center;
    font-size: var(--font-size-sm);
  }

  .auth-message.error {
    color: #EF4444;
  }

  .auth-message.success {
    color: #10B981;
  }
</style>

<script>
  import { signIn, signUp } from '../../lib/auth';

  const modal = document.getElementById('auth-modal');
  const closeButton = modal?.querySelector('.close-button');
  const tabButtons = modal?.querySelectorAll('.tab-button');
  const signinForm = document.getElementById('signin-form');
  const signupForm = document.getElementById('signup-form');
  const message = modal?.querySelector('.auth-message');

  // Tab switching
  tabButtons?.forEach(button => {
    button.addEventListener('click', () => {
      const tab = button.dataset.tab;
      tabButtons.forEach(btn => btn.classList.remove('active'));
      button.classList.add('active');
      
      if (tab === 'signin') {
        signinForm?.removeAttribute('hidden');
        signupForm?.setAttribute('hidden', '');
      } else {
        signinForm?.setAttribute('hidden', '');
        signupForm?.removeAttribute('hidden');
      }
    });
  });

  // Close modal
  closeButton?.addEventListener('click', () => {
    modal?.setAttribute('hidden', '');
  });

  // Sign in
  signinForm?.addEventListener('submit', async (e) => {
    e.preventDefault();
    const email = signinForm.querySelector('#signin-email').value;
    const password = signinForm.querySelector('#signin-password').value;

    try {
      const { error } = await signIn(email, password);
      if (error) throw error;
      
      message.textContent = 'Successfully signed in!';
      message.className = 'auth-message success';
      setTimeout(() => {
        modal?.setAttribute('hidden', '');
        window.location.reload();
      }, 1000);
    } catch (error) {
      message.textContent = error.message;
      message.className = 'auth-message error';
    }
  });

  // Sign up
  signupForm?.addEventListener('submit', async (e) => {
    e.preventDefault();
    const email = signupForm.querySelector('#signup-email').value;
    const password = signupForm.querySelector('#signup-password').value;

    try {
      const { error } = await signUp(email, password);
      if (error) throw error;
      
      message.textContent = 'Successfully signed up! Please check your email.';
      message.className = 'auth-message success';
    } catch (error) {
      message.textContent = error.message;
      message.className = 'auth-message error';
    }
  });
</script>